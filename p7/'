; Sahid Kebe
; Python thingy 
; 12/11
STRUC mStruct
        .esc    RESB 2  ; space for <esc>[
        .row:   RESB 2  ; two digit number (characters)
        .semi   RESB 1  ; space for ;
        .col:   RESB 2  ; two digit number (characters)
        .H      RESB 1  ; space for the H
        .char:  RESB 1  ; space for THE character
        .size:
ENDSTRUC
%macro Termination 0
        mov     eax,1
        mov     ebx,0
        int     80h
%endmacro
%macro ClearScreen 0
        pusha
        mov     eax,4
        mov     ebx,1
        mov     ecx,cls
        mov     edx,4
        int     80h
        popa
%endmacro
%macro SetCursorPosition 2
        push    eax
        mov     ah,%1
        mov     al,%2
        call    _setCursor
        pop     eax
%endmacro
%macro PrintScreen 2
        pusha
        mov     eax,4
        mov     ebx,1
        mov     ecx,%1
        mov     edx,[%2]
        int     80h
        popa
%endmacro
SECTION .bss
py:        RESB mStruct.size*(pythonLen-python)
LEN     equ     1024
inputBuffer     RESB LEN
message:        RESB mStruct.size*(pythonLen-python)
childPID 	RESD  1 

Section .data
 ;Clear Screen control characters 
cls:    db      1bh, '[2J'

; Set cursor position control characters
python:           db "@*****>"
pythonLen:        dd $-python

byebye:         ISTRUC mStruct
                AT mStruct.esc,  db 1bh,'['
                AT mStruct.row,  db '25'
                AT mStruct.semi, db ';'
                AT mStruct.col,  db '07'
                AT mStruct.H,    db 'H'
                AT mStruct.char, db ' '
                IEND
;;;;;;; Screen Pattern
screen: db      "********************************************************************************",0ah
        db      "*                          *                           *                       *",0ah
        db      "*      *************       *        *************      *       *********       *",0ah
        db      "*                          *                           *                       *",0ah
        db      "*                          *                           *                       *",0ah
        db      "*                          *                           *                       *",0ah
        db      "*                                                                              *",0ah
        db      "*           **************************        ***********************          *",0ah
        db      "*                                *               *                             *",0ah
        db      "*                                *     ***********                             *",0ah
        db      "*                          *     *               *     *                       *",0ah
        db      "*                          *     **********      *     *                       *",0ah
        db      "*                          *     *               *     *                       *",0ah
        db      "*                          *     *      **********     *                       *",0ah
        db      "*                          *                           *                       *",0ah
        db      "*                                                                              *",0ah
        db      "*           ***   ***   ***   ***   ***   ***   ***   ***   ***   ***          *",0ah
        db      "*                                                                              *",0ah
        db      "*            *     *     *     *     *     *     *     *     *     *           *",0ah
        db      "*               *     *     *     *     *     *     *     *     *              *",0ah
        db      "*            *     *     *     *     *  W  *     *     *     *     *           *",0ah
        db      "*               *     *     *     *     *     *     *     *     *              *",0ah
        db      "*            *     *     *     *     *     *     *     *     *     *           *",0ah
        db      "*               *     *     *     *     *     *     *     *     *              *",0ah
        db      "********************************************************************************",0ah
screenSize:     dd $-screen
sec 		dd 1,0
Section .text 
global _main,_sleep,childProc 
_main: 
	call _sleep
	PrintScreen screen,screenSize
	mov ax, 80 - (pythonLen-python)
	div ax, 2
	mov ebx, message
	mov ecx, [pythonLen]
	mov edx, python
loadTop:
        mov     BYTE [ebx],1bh
        mov     BYTE [ebx+1],'['
        mov     WORD [ebx+2],"09"  ;;;; ROW might need to swap these
        mov     BYTE [ebx+4],';'
        push    eax                ;;;; Save this for next loop
        call    _toAscii           ;;;  Pass in int in ax, returns two ascii digits in ax
        mov     WORD [ebx+5],ax
        pop     eax                ;;;; Restore the screen col number
        mov     BYTE [ebx+7],'H'
        push    ecx
        mov     cl,[edx]           ;;;; Get next char from string
        mov     [ebx+8],cl
        pop     ecx
        add     ebx,mStruct.size
        inc     edx
        inc     ax
        loop loadTop

top:    call    _displayMessage
        call    _sleep
  ;      call    _adjustMessage
        loop    top

	Termination
	
	mov eax , 2
	int 80h 

	cmp eax, 0 
	je childProc
	mov [childPID],eax
_toAscii:
	push 	ebx
	
	mov 	bl,10
	div 	bl
 	add	ah,"0"
 	add 	al,"0"
	
	pop 	ebx
	ret 
_sleep:
        pusha
        mov     eax,162
        mov     ebx,sec
        mov     ecx,0
        int     80h
        popa
        ret
childProc:
        ; read  keypress
        mov     eax,3 ;sys read
        mov     ebx,0   ;stdin
        mov     ecx,inputBuffer
        mov     edx,LEN
        int     80h
	
	jmp childProc
parent:
	; print message
        mov     eax,4 ;sys write
        mov     ebx,1 ;std out
        mov     ecx,inputBuffer
        mov     edx,1
        int     80h
;;;;;;;;;;;;  Function that shifts row/cols through the array of structs 
;;;;;;;;;;;;  and moves first char one to the left.
;_adjustMessage:
;        pusha

;        mov     ecx,[pythonLen]
;        dec     ecx
;        mov     ebx,message+((pythonLen-python)-1)*mStruct.size

;_amTop: mov     dx,[ebx - mStruct.size + mStruct.row]   ;; get row above
;        mov     [ebx + mStruct.row],dx                  ;; copy to this row

 ;       mov     dx,[ebx - mStruct.size + mStruct.col]   ;; get col above
  ;      mov     [ebx + mStruct.col],dx                  ;; copy to this col

   ;     sub     ebx,mStruct.size
    ;    loop    _amTop

;;;;;;  Adjust first character to move one space to the left 
     ;   cmp     BYTE [ebx + mStruct.col + 1],'0'
      ;  je      carry
       ; dec     BYTE [ebx + mStruct.col + 1]            ;; move first char to left
        ;jmp     adjustEnd
;carry:
 ;       dec     BYTE [ebx + mStruct.col]
  ;      mov     BYTE [ebx + mStruct.col + 1],'9'
;adjustEnd:
 ;       popa
  ;      ret
;. _setcursor expects AH = row, AL = col
_setCursor:
        pusha
;;; save original to get col later
        push    eax
;;;;;; process row
        shr     ax,8    ;; shift row to right
        mov     bl,10
        div     bl      ;; puts ax/10 in al, remainder in ah
        add     ah,'0'
        add     al,'0'
        mov     BYTE [mStruct.row],al
        mov     BYTE [mStruct.row+1],ah
;;;; process col
        pop     eax     ;; restore original parms
        and     ax,0FFh ;; erase row, leave col
        mov     bl,10
        div     bl      ;; puts ax/10 in al, remainder in ah
        add     ah,'0'
        add     al,'0'
        mov     BYTE [mStruct.col],al
        mov     BYTE [mStruct.col+1],ah

        ;;;;; now print the set cursor codes
        mov     eax,4
        mov     ebx,1
        mov     ecx,mStruct.esc
        mov     edx,8
        int     80h

        popa
theEnd:
        ;;;;;;  Kill the child process
        mov     eax,37
        mov     ebx,[childPID]
        mov     ecx,9  ; kill signal
        int     80h
        Termination
_displayMessage:
	pusha 
	mov ebx,message
	mov ecx,[pythonLen]
_dmTop: push    ecx
        push    ebx
        mov     eax,4  ; system print
        mov     ecx,ebx ; points to string to print
        mov     ebx,1   ; standard out
        mov     edx,9   ; num chars to print
        int     80h

        pop     ebx
        add     ebx,mStruct.size
        pop     ecx
        loop    _dmTop
        popa
        ret



